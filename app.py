# app.py - Version compl√®te am√©lior√©e

# === IMPORTS (les biblioth√®ques qu'on utilise) ===
from profile_writer import write_profile_to_obsidian
import os
import json
import tempfile
import openai
import hashlib
from datetime import datetime
from typing import List, Dict, Optional
from dotenv import load_env
load_dotenv()
from fastapi import FastAPI, UploadFile, File, Query, Form
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from sentence_transformers import SentenceTransformer
from supabase import create_client
from embedding_utils import load_documents, embed_documents, create_vector_db, query_db

# === CONFIGURATION DE BASE ===
# Dossier temporaire pour stocker les mod√®les IA
cache_dir = os.path.join(tempfile.gettempdir(), "hf_cache")
os.makedirs(cache_dir, exist_ok=True)
os.environ["TRANSFORMERS_CACHE"] = cache_dir
os.environ["HF_HOME"] = cache_dir

# === VARIABLES D'ENVIRONNEMENT (vos cl√©s API) ===
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# V√©rifier que toutes les cl√©s sont pr√©sentes
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("‚ùå ERREUR: Cl√©s Supabase manquantes dans le fichier .env")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå ERREUR: Cl√© OpenAI manquante dans le fichier .env")

# === INITIALISATION DES SERVICES ===
supabase_client = create_client(SUPABASE_URL, SUPABASE_KEY)
openai.api_key = OPENAI_API_KEY
model = SentenceTransformer("all-MiniLM-L6-v2", cache_folder=cache_dir)
app = FastAPI(title="Cocoon AI Assistant", description="API pour votre assistant cr√©ateur de contenu")

# === FONCTIONS UTILITAIRES ===
def get_user_vault_path(user_id: str) -> str:
    """Cr√©er le chemin vers le dossier vault de l'utilisateur"""
    base_path = os.path.join(tempfile.gettempdir(), "vaults")
    user_path = os.path.join(base_path, f"user_{user_id}")
    os.makedirs(user_path, exist_ok=True)  # Cr√©er le dossier s'il n'existe pas
    return user_path

def calculate_profile_completion(profile_content: str) -> int:
    """Calculer le pourcentage de completion du profil utilisateur"""
    # Liste des champs importants √† v√©rifier
    required_fields = [
        "Niveau d'exp√©rience", "Objectif principal", "Type d'activit√©",
        "Description", "Niche", "Types de contenu", "Plateformes cibles",
        "Audience cible", "Temps disponible", "D√©fis actuels"
    ]
    
    filled_fields = 0
    total_fields = len(required_fields)
    
    # Compter combien de champs sont remplis
    for field in required_fields:
        if field in profile_content and "Non d√©fini" not in profile_content:
            filled_fields += 1
    
    # Calculer le pourcentage
    return round((filled_fields / total_fields) * 100)

def format_metrics(metrics: dict) -> str:
    """Transformer un dictionnaire de m√©triques en texte markdown"""
    if not metrics:
        return "Aucune m√©trique d√©finie"
    
    formatted = ""
    for key, value in metrics.items():
        formatted += f"- **{key}**: {value}\n"
    
    return formatted

# === MOD√àLES DE DONN√âES (ce que l'API peut recevoir) ===

class AskRequest(BaseModel):
    """Mod√®le pour les questions √† l'IA"""
    user_id: str
    question: str

class NoteRequest(BaseModel):
    """Mod√®le pour sauvegarder une note"""
    user_id: str
    title: str
    content: str

class ProfileRequest(BaseModel):
    """Mod√®le pour sauvegarder un profil utilisateur"""
    user_id: str
    profile_data: dict

class GenerateRequest(BaseModel):
    """Mod√®le pour la g√©n√©ration de contenu"""
    prompt: str

class UserResourceRequest(BaseModel):
    """Mod√®le pour ajouter une ressource utilisateur"""
    user_id: str
    resource_type: str  # "tool", "inspiration", "learning", "contact"
    title: str
    description: str
    url: Optional[str] = None
    tags: List[str] = []
    category: Optional[str] = None

class UserGoalRequest(BaseModel):
    """Mod√®le pour ajouter un objectif utilisateur"""
    user_id: str
    goal_type: str  # "short_term", "long_term", "metric"
    title: str
    description: str
    deadline: Optional[str] = None
    metrics: Optional[dict] = None

class ContentIdeaRequest(BaseModel):
    """Mod√®le pour ajouter une id√©e de contenu"""
    user_id: str
    title: str
    description: str
    platform: str
    content_type: str
    status: str = "idea"  # "idea", "planned", "in_progress", "published"

# === ROUTES DE BASE ===

@app.get("/")
def root():
    """Page d'accueil de l'API"""
    return {"message": "üöÄ Cocoon AI Assistant API est en ligne !"}

@app.get("/ping")
def ping():
    """Test de connexion simple"""
    return {"pong": "ok", "timestamp": datetime.now().isoformat()}

@app.post("/test")
async def test_connection():
    """Test de connexion complet"""
    return {
        "status": "ok", 
        "message": "Connexion r√©ussie",
        "services": {
            "supabase": "‚úÖ Connect√©",
            "openai": "‚úÖ Connect√©",
            "model": "‚úÖ Charg√©"
        }
    }

# === ROUTES PRINCIPALES AM√âLIOR√âES ===

@app.get("/user/{user_id}/dashboard")
async def get_user_dashboard(user_id: str):
    """üìä R√©cup√©rer le dashboard complet de l'utilisateur"""
    try:
        print(f"üìä R√©cup√©ration dashboard pour utilisateur: {user_id}")
        
        vault_path = get_user_vault_path(user_id)
        
        # V√©rifier si le profil existe
        profile_path = os.path.join(vault_path, "Profile/user_profile.md")
        if not os.path.exists(profile_path):
            return JSONResponse(
                status_code=404, 
                content={"error": "‚ùå Profil utilisateur non trouv√©. Cr√©ez d'abord votre profil."}
            )
        
        # Lire le contenu du profil
        with open(profile_path, "r", encoding="utf-8") as f:
            profile_content = f.read()
        
        # Calculer la completion du profil
        completion_percentage = calculate_profile_completion(profile_content)
        
        # Compter les fichiers dans le vault
        file_count = 0
        for root, dirs, files in os.walk(vault_path):
            file_count += len([f for f in files if f.endswith('.md')])
        
        # R√©cup√©rer les derni√®res mises √† jour depuis Supabase
        recent_updates_result = supabase_client.table("vault_files")\
            .select("path, updated_at")\
            .eq("user_id", user_id)\
            .order("updated_at", desc=True)\
            .limit(5)\
            .execute()
        
        recent_updates = recent_updates_result.data if recent_updates_result.data else []
        
        # G√©n√©rer des actions sugg√©r√©es
        suggested_actions = await generate_next_actions(user_id, vault_path)
        
        dashboard_data = {
            "profile_completion": completion_percentage,
            "total_files": file_count,
            "recent_updates": recent_updates,
            "suggested_actions": suggested_actions,
            "vault_path": vault_path,
            "status": "‚úÖ Dashboard charg√© avec succ√®s"
        }
        
        print(f"‚úÖ Dashboard g√©n√©r√©: {completion_percentage}% completion, {file_count} fichiers")
        return dashboard_data
        
    except Exception as e:
        print(f"‚ùå Erreur dashboard: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors du chargement du dashboard: {str(e)}"})

@app.post("/user/resource")
async def add_user_resource(req: UserResourceRequest):
    """üõ†Ô∏è Ajouter une ressource personnalis√©e √† l'utilisateur"""
    try:
        print(f"üõ†Ô∏è Ajout ressource '{req.title}' pour utilisateur {req.user_id}")
        
        vault_path = get_user_vault_path(req.user_id)
        
        # Cr√©er le nom de fichier s√©curis√© (enlever espaces et caract√®res sp√©ciaux)
        safe_title = req.title.replace(" ", "_").replace("/", "_").lower()
        file_path = f"Resources_and_Skills/my_resources/{req.resource_type}_{safe_title}.md"
        
        # Cr√©er le contenu avec m√©tadonn√©es YAML
        content = f"""---
type: {req.resource_type}
category: {req.category or "general"}
tags: {req.tags}
created: {datetime.now().isoformat()}
---

# {req.title}

**Type**: {req.resource_type}
**Cat√©gorie**: {req.category or "G√©n√©ral"}

## Description
{req.description}

{f"**URL**: {req.url}" if req.url else ""}

## Tags
{", ".join(req.tags) if req.tags else "Aucun tag"}

## Notes personnelles
<!-- Ajoutez vos notes ici -->

## Actions √† faire
- [ ] Explorer cette ressource
- [ ] Prendre des notes
- [ ] Appliquer les apprentissages
"""
        
        # √âcrire le fichier dans le vault
        full_path = os.path.join(vault_path, file_path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content.strip())
        
        # Synchroniser avec Supabase
        supabase_client.table("vault_files").upsert({
            "user_id": req.user_id,
            "path": file_path,
            "content": content.strip(),
            "resource_type": req.resource_type,
            "updated_at": datetime.now().isoformat()
        }).execute()
        
        print(f"‚úÖ Ressource ajout√©e: {file_path}")
        return {
            "status": "‚úÖ Ressource ajout√©e avec succ√®s", 
            "file_path": file_path,
            "message": f"Votre ressource '{req.title}' a √©t√© sauvegard√©e dans votre vault Obsidian"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur ajout ressource: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors de l'ajout de la ressource: {str(e)}"})

@app.post("/user/goal")
async def add_user_goal(req: UserGoalRequest):
    """üéØ Ajouter un objectif utilisateur"""
    try:
        print(f"üéØ Ajout objectif '{req.title}' pour utilisateur {req.user_id}")
        
        vault_path = get_user_vault_path(req.user_id)
        
        safe_title = req.title.replace(" ", "_").replace("/", "_").lower()
        file_path = f"Goals_and_Metrics/{req.goal_type}_goals/{safe_title}.md"
        
        content = f"""---
type: {req.goal_type}
deadline: {req.deadline or "Non d√©finie"}
created: {datetime.now().isoformat()}
status: active
---

# üéØ {req.title}

**Type**: {req.goal_type}
**√âch√©ance**: {req.deadline or "Non d√©finie"}

## Description
{req.description}

## M√©triques de succ√®s
{format_metrics(req.metrics) if req.metrics else "√Ä d√©finir"}

## Plan d'action
- [ ] √âtape 1 √† d√©finir
- [ ] √âtape 2 √† d√©finir
- [ ] √âtape 3 √† d√©finir

## Suivi de progression
**Date de cr√©ation**: {datetime.now().strftime("%Y-%m-%d")}
**Derni√®re mise √† jour**: {datetime.now().strftime("%Y-%m-%d")}
**Statut**: üü° En cours

### Notes d'avancement
<!-- Ajoutez vos notes de progression ici -->

### Obstacles rencontr√©s
<!-- Notez les difficult√©s et comment les surmonter -->

### C√©l√©brations
<!-- Notez vos victoires, m√™me petites ! -->
"""
        
        full_path = os.path.join(vault_path, file_path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content.strip())
        
        supabase_client.table("vault_files").upsert({
            "user_id": req.user_id,
            "path": file_path,
            "content": content.strip(),
            "goal_type": req.goal_type,
            "updated_at": datetime.now().isoformat()
        }).execute()
        
        print(f"‚úÖ Objectif ajout√©: {file_path}")
        return {
            "status": "‚úÖ Objectif ajout√© avec succ√®s", 
            "file_path": file_path,
            "message": f"Votre objectif '{req.title}' a √©t√© cr√©√© dans votre vault"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur ajout objectif: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors de l'ajout de l'objectif: {str(e)}"})

@app.post("/user/content_idea")
async def add_content_idea(req: ContentIdeaRequest):
    """üí° Ajouter une id√©e de contenu"""
    try:
        print(f"üí° Ajout id√©e contenu '{req.title}' pour utilisateur {req.user_id}")
        
        vault_path = get_user_vault_path(req.user_id)
        
        safe_title = req.title.replace(" ", "_").replace("/", "_").lower()
        file_path = f"Content_Strategy/content_ideas/{req.platform}_{safe_title}.md"
        
        content = f"""---
platform: {req.platform}
content_type: {req.content_type}
status: {req.status}
created: {datetime.now().isoformat()}
---

# üí° {req.title}

**Plateforme**: {req.platform}
**Type**: {req.content_type}
**Statut**: {req.status}

## Description de l'id√©e
{req.description}

## √âl√©ments cl√©s
- **Hook (accroche)**: √Ä d√©finir
- **Message principal**: √Ä d√©finir
- **Call-to-action**: √Ä d√©finir

## Structure propos√©e
1. **Introduction** (0-5 sec)
2. **D√©veloppement** (5-30 sec)
3. **Conclusion** (30-60 sec)

## Ressources n√©cessaires
- [ ] Mat√©riel de tournage
- [ ] Recherche/pr√©paration
- [ ] Post-production
- [ ] Visuels/graphics

## Planning
- **Date pr√©vue**: √Ä d√©finir
- **Temps estim√©**: √Ä d√©finir
- **Priorit√©**: Moyenne

## Hashtags sugg√©r√©s
<!-- Ajoutez vos hashtags ici -->

## Notes de production
<!-- Ajoutez vos notes techniques ici -->

## M√©triques √† suivre
- Vues
- Engagement
- Partages
- Commentaires
"""
        
        full_path = os.path.join(vault_path, file_path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content.strip())
        
        supabase_client.table("vault_files").upsert({
            "user_id": req.user_id,
            "path": file_path,
            "content": content.strip(),
            "content_type": req.content_type,
            "platform": req.platform,
            "updated_at": datetime.now().isoformat()
        }).execute()
        
        print(f"‚úÖ Id√©e contenu ajout√©e: {file_path}")
        return {
            "status": "‚úÖ Id√©e de contenu ajout√©e avec succ√®s", 
            "file_path": file_path,
            "message": f"Votre id√©e '{req.title}' pour {req.platform} a √©t√© sauvegard√©e"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur ajout id√©e contenu: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors de l'ajout de l'id√©e: {str(e)}"})

# === ROUTES DE SYNCHRONISATION ===

@app.get("/sync/{user_id}/status")
async def get_sync_status(user_id: str):
    """üîÑ Obtenir le statut de synchronisation"""
    try:
        vault_path = get_user_vault_path(user_id)
        
        # Compter les fichiers locaux
        local_files = 0
        if os.path.exists(vault_path):
            for root, dirs, files in os.walk(vault_path):
                local_files += len([f for f in files if f.endswith('.md')])
        
        # Compter les fichiers en base
        db_files_result = supabase_client.table("vault_files")\
            .select("id", count="exact")\
            .eq("user_id", user_id)\
            .execute()
        
        db_count = len(db_files_result.data) if db_files_result.data else 0
        
        # Derni√®re synchronisation
        last_sync_result = supabase_client.table("vault_files")\
            .select("updated_at")\
            .eq("user_id", user_id)\
            .order("updated_at", desc=True)\
            .limit(1)\
            .execute()
        
        last_sync = None
        if last_sync_result.data and len(last_sync_result.data) > 0:
            last_sync = last_sync_result.data[0]["updated_at"]
        
        status = {
            "local_files": local_files,
            "db_files": db_count,
            "last_sync": last_sync,
            "sync_needed": local_files != db_count,
            "vault_exists": os.path.exists(vault_path),
            "status": "‚úÖ Synchronis√©" if local_files == db_count else "‚ö†Ô∏è Synchronisation n√©cessaire"
        }
        
        return status
        
    except Exception as e:
        print(f"‚ùå Erreur statut sync: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors de la v√©rification du statut: {str(e)}"})

# === ROUTES IA AM√âLIOR√âES ===

@app.post("/ask")
async def ask_ai_smart(req: AskRequest):
    """ü§ñ Poser une question √† l'IA avec contexte intelligent"""
    try:
        print(f"ü§ñ Question IA de {req.user_id}: {req.question[:50]}...")
        
        user_vault = get_user_vault_path(req.user_id)
        
        # Charger les documents du vault
        docs = load_documents(user_vault)
        
        if not docs:
            return {"answer": "‚ùå Aucun contenu trouv√© dans votre vault. Commencez par cr√©er votre profil !"}
        
        # Recherche s√©mantique dans les documents
        texts, embeddings, metadatas = embed_documents(docs, model)
        collection = create_vector_db(texts, embeddings, metadatas)
        results = query_db(collection, model, req.question)
        
        if not results["documents"]:
            return {"answer": "‚ùå Pas de contexte pertinent trouv√© pour votre question."}
        
        # Construire le contexte
        context = "\n\n".join(results["documents"][0])
        
        # Pr√©parer le prompt enrichi
        system_prompt = """Tu es un consultant expert en strat√©gie de contenu et cr√©ation digitale. 
        Tu as acc√®s au vault Obsidian complet de l'utilisateur avec son profil, ses objectifs, et sa strat√©gie.
        R√©ponds de mani√®re personnalis√©e, actionnable et en fran√ßais. 
        Utilise des emojis pour rendre tes r√©ponses plus engageantes.
        Donne des conseils concrets et pratiques."""
        
        user_prompt = f"""
CONTEXTE DU VAULT UTILISATEUR:
{context}

QUESTION DE L'UTILISATEUR:
{req.question}

R√©ponds en tenant compte de son profil complet et de sa strat√©gie actuelle.
"""
        
        # Appel √† OpenAI
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        
        answer = response.choices[0].message.content
        
        print(f"‚úÖ R√©ponse IA g√©n√©r√©e ({len(answer)} caract√®res)")
        return {
            "answer": answer,
            "context_used": True,
            "documents_found": len(docs),
            "status": "‚úÖ R√©ponse g√©n√©r√©e avec succ√®s"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur IA: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors de la g√©n√©ration de la r√©ponse: {str(e)}"})

# === ROUTES ORIGINALES (conserv√©es) ===

@app.post("/note")
async def save_note(req: NoteRequest):
    """üìù Sauvegarder une note simple"""
    try:
        path = get_user_vault_path(req.user_id)
        with open(os.path.join(path, f"{req.title}.md"), "w", encoding="utf-8") as f:
            f.write(req.content)
        return {"status": "üìù Note sauvegard√©e avec succ√®s"}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.post("/profile")
async def save_profile(req: ProfileRequest):
    """üë§ Sauvegarder le profil utilisateur complet"""
    try:
        path = get_user_vault_path(req.user_id)
        
        # Sauvegarder les donn√©es brutes
        with open(os.path.join(path, "user_profile.json"), "w", encoding="utf-8") as f:
            json.dump(req.profile_data, f, indent=2, ensure_ascii=False)

        # Cr√©er la structure Obsidian enrichie
        vault_path, files_written = write_profile_to_obsidian(req.user_id, req.profile_data)

        # Synchroniser avec Supabase
        for rel_path, content in files_written:
            supabase_client.table("vault_files").upsert({
                "user_id": req.user_id,
                "path": rel_path,
                "content": content,
                "updated_at": datetime.now().isoformat()
            }).execute()

        return {
            "status": "‚úÖ Profil sauvegard√© et vault Obsidian cr√©√© avec succ√®s",
            "files_created": len(files_written),
            "vault_path": vault_path
        }
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# === FONCTIONS UTILITAIRES AVANC√âES ===

async def generate_next_actions(user_id: str, vault_path: str) -> List[str]:
    """G√©n√©rer des actions sugg√©r√©es pour l'utilisateur"""
    actions = []
    
    try:
        # V√©rifier les fichiers manquants importants
        important_files = [
            ("Content_Strategy/content_calendar.md", "Cr√©er un calendrier de contenu"),
            ("Goals_and_Metrics/monthly_review.md", "D√©finir vos objectifs mensuels"),
            ("Resources_and_Skills/skills_tracker.md", "Faire le bilan de vos comp√©tences"),
            ("Content_Strategy/competitor_analysis.md", "Analyser vos concurrents")
        ]
        
        for file_path, action in important_files:
            if not os.path.exists(os.path.join(vault_path, file_path)):
                actions.append(action)
        
        # Analyser l'activit√© r√©cente (fichiers modifi√©s dans les 7 derniers jours)
        recent_files = []
        one_week_ago = datetime.now().timestamp() - 604800  # 7 jours en secondes
        
        for root, dirs, files in os.walk(vault_path):
            for file in files:
                if file.endswith('.md'):
                    file_path = os.path.join(root, file)
                    if os.path.getmtime(file_path) > one_week_ago:
                        recent_files.append(file)
        
        if len(recent_files) < 3:
            actions.append("Ajouter plus de contenu √† votre vault cette semaine")
        
        # Suggestions par d√©faut si le vault est vide
        if not actions:
            actions = [
                "Excellent ! Votre vault semble complet üéâ",
                "Pensez √† faire une r√©vision de vos objectifs",
                "Ajoutez une nouvelle id√©e de contenu",
                "Mettez √† jour vos m√©triques de performance"
            ]
        
        return actions[:5]  # Limiter √† 5 suggestions max
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration actions: {e}")
        return [
            "Compl√©tez votre profil utilisateur",
            "Ajoutez vos premiers objectifs",
            "Cr√©ez votre premi√®re id√©e de contenu"
        ]

# === ROUTES DE G√âN√âRATION DE CONTENU (conserv√©es) ===

@app.post("/script")
async def generate_script(req: GenerateRequest):
    """üé¨ G√©n√©rer un script"""
    return await generate_with_role(req, "Tu es un sc√©nariste cr√©atif expert. Cr√©e des scripts engageants et bien structur√©s.")

@app.post("/concepts")
async def generate_concepts(req: GenerateRequest):
    """üí° G√©n√©rer des concepts"""
    return await generate_with_role(req, "Tu es un moteur d'innovation. G√©n√®re des concepts cr√©atifs et originaux.")

@app.post("/ideas")
async def generate_ideas(req: GenerateRequest):
    """üöÄ G√©n√©rer des id√©es"""
    return await generate_with_role(req, "Tu es un strat√®ge de contenu. G√©n√®re des id√©es pratiques et actionnables.")

async def generate_with_role(req: GenerateRequest, role: str):
    """Fonction g√©n√©rique pour la g√©n√©ration avec un r√¥le sp√©cifique"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": role},
                {"role": "user", "content": req.prompt}
            ],
            temperature=0.9
        )
        return {"response": response.choices[0].message.content}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# === ROUTES DE GESTION DE FICHIERS ===

@app.post("/update_file")
async def update_file(
    user_id: str = Form(...),
    file_path: str = Form(...),
    new_content: str = Form(...)
):
    """üìù Mettre √† jour un fichier existant"""
    try:
        vault_path = get_user_vault_path(user_id)
        full_path = os.path.join(vault_path, file_path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)

        with open(full_path, "w", encoding="utf-8") as f:
            f.write(new_content.strip())

        supabase_client.table("vault_files").upsert({
            "user_id": user_id,
            "path": file_path,
            "content": new_content.strip(),
            "updated_at": datetime.now().isoformat()
        }).execute()

        return {"status": "‚úÖ Fichier mis √† jour avec succ√®s", "file": file_path}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.post("/obsidian")
async def upload_obsidian_file(user_id: str, file: UploadFile = File(...)):
    """üìÅ Uploader un fichier dans le vault"""
    try:
        path = get_user_vault_path(user_id)
        with open(os.path.join(path, file.filename), "wb") as f:
            f.write(await file.read())
        return {"status": "üìÅ Fichier upload√© avec succ√®s"}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/user/{user_id}/vault_structure")
async def get_vault_structure(user_id: str):
    """üìÇ R√©cup√©rer la structure compl√®te du vault utilisateur"""
    try:
        vault_path = get_user_vault_path(user_id)
        structure = {}
        
        # Parcourir tous les dossiers et fichiers
        for root, dirs, files in os.walk(vault_path):
            # Calculer le chemin relatif depuis la racine du vault
            rel_path = os.path.relpath(root, vault_path)
            if rel_path == ".":
                rel_path = "root"
            
            # Stocker les informations du dossier
            structure[rel_path] = {
                "folders": dirs,
                "files": [f for f in files if f.endswith('.md')],
                "file_count": len([f for f in files if f.endswith('.md')])
            }
        
        return {
            "structure": structure, 
            "vault_path": vault_path,
            "total_folders": len(structure),
            "status": "‚úÖ Structure r√©cup√©r√©e avec succ√®s"
        }
        
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/user/{user_id}/files")
async def get_user_files(user_id: str, folder: str = None):
    """üìÑ R√©cup√©rer les fichiers d'un utilisateur (optionnel: dans un dossier sp√©cifique)"""
    try:
        # R√©cup√©rer depuis Supabase
        query = supabase_client.table("vault_files")\
            .select("path, updated_at, file_type, metadata")\
            .eq("user_id", user_id)
        
        # Filtrer par dossier si sp√©cifi√©
        if folder:
            query = query.like("path", f"{folder}%")
        
        result = query.order("updated_at", desc=True).execute()
        
        files = result.data if result.data else []
        
        return {
            "files": files,
            "count": len(files),
            "folder": folder or "all",
            "status": "‚úÖ Fichiers r√©cup√©r√©s avec succ√®s"
        }
        
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/user/{user_id}/smart_suggestions")
async def get_smart_suggestions(user_id: str):
    """üß† G√©n√©rer des suggestions intelligentes bas√©es sur le contenu du vault"""
    try:
        print(f"üß† G√©n√©ration suggestions pour {user_id}")
        
        vault_path = get_user_vault_path(user_id)
        
        # Charger et analyser le contenu
        docs = load_documents(vault_path)
        if not docs:
            return {
                "suggestions": [
                    "Commencez par compl√©ter votre profil utilisateur",
                    "D√©finissez vos premiers objectifs de contenu",
                    "Ajoutez vos plateformes de publication pr√©f√©r√©es"
                ]
            }
        
        # Analyser le contenu pour g√©n√©rer des suggestions avec l'IA
        suggestions = await analyze_vault_and_suggest(docs, user_id)
        
        return {
            "suggestions": suggestions,
            "based_on_files": len(docs),
            "status": "‚úÖ Suggestions g√©n√©r√©es avec succ√®s"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur suggestions: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

async def analyze_vault_and_suggest(docs: List[dict], user_id: str) -> List[str]:
    """Analyser le vault et sugg√©rer des am√©liorations avec l'IA"""
    try:
        # Cr√©er un r√©sum√© du contenu (limit√© pour √©viter le token limit)
        content_summary = "\n".join([
            f"Fichier: {doc['source']}\nContenu: {doc['content'][:150]}...\n"
            for doc in docs[:5]  # Prendre seulement les 5 premiers fichiers
        ])
        
        prompt = f"""
Analyse ce vault Obsidian d'un cr√©ateur de contenu et sugg√®re 4-5 am√©liorations concr√®tes et actionnables.

CONTENU DU VAULT:
{content_summary}

G√©n√®re des suggestions SP√âCIFIQUES et ACTIONNABLES comme:
- "Ajoutez un calendrier de publication pour vos contenus Instagram"
- "Cr√©ez une analyse de vos 3 principaux concurrents"
- "D√©finissez vos m√©triques de succ√®s pour ce mois"

R√©ponds uniquement avec une liste de suggestions, une par ligne, commen√ßant par un tiret.
"""
        
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system", 
                    "content": "Tu es un consultant en strat√©gie de contenu. G√©n√®re des suggestions courtes et actionnables."
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=300
        )
        
        # Parser la r√©ponse en liste
        suggestions_text = response.choices[0].message.content
        suggestions = [
            s.strip().lstrip('- ').lstrip('* ')  # Enlever les tirets/puces du d√©but
            for s in suggestions_text.split('\n') 
            if s.strip() and len(s.strip()) > 10
        ]
        
        # Limiter √† 5 suggestions maximum
        return suggestions[:5]
        
    except Exception as e:
        print(f"‚ùå Erreur analyse IA: {e}")
        # Suggestions par d√©faut en cas d'erreur
        return [
            "Compl√©tez votre profil avec plus de d√©tails sur votre niche",
            "Ajoutez un calendrier de publication de contenu",
            "Cr√©ez une liste de vos concurrents √† analyser",
            "D√©finissez 3 objectifs SMART pour ce mois",
            "Documentez vos meilleures pratiques de cr√©ation"
        ]

# === NOUVELLES ROUTES AVANC√âES ===

@app.post("/ai/content_ideas")
async def generate_content_ideas(
    user_id: str = Form(...),
    platform: str = Form(None),
    count: int = Form(5)
):
    """üí° G√©n√©rer des id√©es de contenu personnalis√©es"""
    try:
        print(f"üí° G√©n√©ration {count} id√©es pour {user_id} sur {platform or 'toutes plateformes'}")
        
        # R√©cup√©rer le contexte utilisateur
        vault_path = get_user_vault_path(user_id)
        docs = load_documents(vault_path)
        
        # Construire le contexte depuis les documents
        user_context = ""
        if docs:
            # Chercher le profil utilisateur
            for doc in docs:
                if "profile" in doc["source"].lower() or "profil" in doc["source"].lower():
                    user_context += f"PROFIL: {doc['content'][:500]}\n\n"
                    break
        
        # Pr√©parer le prompt
        platform_text = f"pour {platform}" if platform else "multi-plateformes"
        
        prompt = f"""
G√©n√®re {count} id√©es de contenu cr√©atives et engageantes {platform_text} pour ce cr√©ateur:

CONTEXTE UTILISATEUR:
{user_context if user_context else "Cr√©ateur de contenu g√©n√©raliste"}

Crit√®res:
- Id√©es actuelles et tendances
- Adapt√©es au contexte de l'utilisateur
- Facilement r√©alisables
- Potentiel viral √©lev√©

Format de r√©ponse (JSON):
[
  {{
    "title": "Titre accrocheur",
    "description": "Description d√©taill√©e de l'id√©e",
    "content_type": "video/image/carousel/story",
    "platform": "{platform or 'multiple'}",
    "difficulty": "facile/moyen/difficile",
    "estimated_time": "temps estim√©",
    "key_points": ["point 1", "point 2", "point 3"]
  }}
]
"""
        
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system", 
                    "content": "Tu es un expert en cr√©ation de contenu viral. G√©n√®re des id√©es cr√©atives et r√©alisables."
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.9,
            max_tokens=1500
        )
        
        try:
            # Essayer de parser le JSON
            ideas_text = response.choices[0].message.content
            
            # Nettoyer le texte (enlever les balises markdown si pr√©sentes)
            if "```json" in ideas_text:
                ideas_text = ideas_text.split("```json")[1].split("```")[0]
            elif "```" in ideas_text:
                ideas_text = ideas_text.split("```")[1].split("```")[0]
            
            ideas = json.loads(ideas_text)
            
            if not isinstance(ideas, list):
                ideas = []
                
        except json.JSONDecodeError:
            # Si le JSON n'est pas valide, cr√©er des id√©es par d√©faut
            ideas = [
                {
                    "title": "Tendance du moment dans votre niche",
                    "description": "Partagez votre point de vue sur une tendance actuelle",
                    "content_type": "video",
                    "platform": platform or "multiple",
                    "difficulty": "facile",
                    "estimated_time": "30 minutes",
                    "key_points": ["Recherche tendance", "Point de vue personnel", "Call-to-action"]
                }
            ]
        
        print(f"‚úÖ {len(ideas)} id√©es g√©n√©r√©es")
        return {
            "ideas": ideas, 
            "count": len(ideas),
            "platform": platform or "all",
            "status": "‚úÖ Id√©es g√©n√©r√©es avec succ√®s"
        }
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration id√©es: {e}")
        return JSONResponse(status_code=500, content={"error": f"Erreur lors de la g√©n√©ration d'id√©es: {str(e)}"})

@app.get("/ai/performance_analysis/{user_id}")
async def analyze_performance_potential(user_id: str):
    """üìä Analyser le potentiel de performance du cr√©ateur"""
    try:
        print(f"üìä Analyse performance pour {user_id}")
        
        vault_path = get_user_vault_path(user_id)
        docs = load_documents(vault_path)
        
        if not docs:
            return {
                "error": "Aucun contenu trouv√© pour l'analyse",
                "recommendation": "Cr√©ez d'abord votre profil et strat√©gie de contenu"
            }
        
        # Construire le contexte pour l'analyse
        vault_content = "\n".join([
            f"Fichier: {doc['source']}\n{doc['content'][:300]}...\n"
            for doc in docs[:3]
        ])
        
        analysis_prompt = f"""
Analyse le potentiel de performance de ce cr√©ateur de contenu bas√© sur son vault Obsidian:

CONTENU DU VAULT:
{vault_content}

√âvalue ces dimensions sur 10 et donne des recommandations:

1. Clart√© de la niche (0-10)
2. Coh√©rence de la strat√©gie (0-10)  
3. Pr√©paration et organisation (0-10)
4. Potentiel d'audience (0-10)
5. Potentiel de mon√©tisation (0-10)

Format JSON:
{{
  "scores": {{
    "niche_clarity": X,
    "strategy_coherence": X,
    "preparation": X,
    "audience_potential": X,
    "monetization_potential": X
  }},
  "overall_score": X,
  "strengths": ["force 1", "force 2"],
  "improvement_areas": ["am√©lioration 1", "am√©lioration 2"],
  "recommendations": ["conseil 1", "conseil 2", "conseil 3"]
}}
"""
        
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system", 
                    "content": "Tu es un analyste expert en performance de cr√©ateurs de contenu. Sois pr√©cis et constructif."
                },
                {"role": "user", "content": analysis_prompt}
            ],
            temperature=0.3
        )
        
        try:
            analysis_text = response.choices[0].message.content
            
            # Nettoyer le JSON
            if "```json" in analysis_text:
                analysis_text = analysis_text.split("```json")[1].split("```")[0]
            elif "```" in analysis_text:
                analysis_text = analysis_text.split("```")[1].split("```")[0]
            
            analysis = json.loads(analysis_text)
            analysis["status"] = "‚úÖ Analyse termin√©e"
            
            return analysis
            
        except json.JSONDecodeError:
            # Analyse par d√©faut si le JSON √©choue
            return {
                "scores": {
                    "niche_clarity": 7,
                    "strategy_coherence": 6,
                    "preparation": 8,
                    "audience_potential": 7,
                    "monetization_potential": 6
                },
                "overall_score": 6.8,
                "strengths": ["Bonne organisation", "Contenu structur√©"],
                "improvement_areas": ["D√©finir la niche plus clairement", "D√©velopper la strat√©gie de mon√©tisation"],
                "recommendations": ["Analysez vos concurrents", "Cr√©ez un calendrier de contenu", "D√©finissez vos m√©triques de succ√®s"],
                "status": "‚úÖ Analyse termin√©e (mode par d√©faut)"
            }
                
    except Exception as e:
        print(f"‚ùå Erreur analyse performance: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

# === ROUTES DE D√âMARRAGE ET DEBUG ===

@app.get("/debug/{user_id}")
async def debug_user(user_id: str):
    """üîç Debug - Informations compl√®tes sur un utilisateur"""
    try:
        vault_path = get_user_vault_path(user_id)
        
        # Compter les fichiers
        file_count = 0
        files_list = []
        if os.path.exists(vault_path):
            for root, dirs, files in os.walk(vault_path):
                for file in files:
                    if file.endswith('.md'):
                        file_count += 1
                        rel_path = os.path.relpath(os.path.join(root, file), vault_path)
                        files_list.append(rel_path)
        
        # V√©rifier Supabase
        db_files = supabase_client.table("vault_files")\
            .select("path, updated_at")\
            .eq("user_id", user_id)\
            .execute()
        
        debug_info = {
            "user_id": user_id,
            "vault_path": vault_path,
            "vault_exists": os.path.exists(vault_path),
            "local_files": {
                "count": file_count,
                "files": files_list[:10]  # Premi√®res 10 files
            },
            "database_files": {
                "count": len(db_files.data) if db_files.data else 0,
                "files": [f["path"] for f in (db_files.data or [])[:10]]
            },
            "sync_status": "synced" if file_count == len(db_files.data or []) else "needs_sync",
            "timestamp": datetime.now().isoformat()
        }
        
        return debug_info
        
    except Exception as e:
        return {"error": str(e), "user_id": user_id}

if __name__ == "__main__":
    print("üöÄ D√©marrage de Cocoon AI Assistant API...")
    print("üìñ Documentation disponible sur: http://localhost:8000/docs")
    print("üîÑ Health check: http://localhost:8000/ping")
    
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)